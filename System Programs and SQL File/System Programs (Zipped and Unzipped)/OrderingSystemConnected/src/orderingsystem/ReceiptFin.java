/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package orderingsystem;
import java.awt.print.PrinterException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.TableModel;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javafx.beans.binding.Bindings.select;
import javax.swing.JOptionPane;
import static orderingsystem.Calcu.customerName;
import static orderingsystem.POSNEW.btnRefresh;
/**
 *
 * @author rejean
 */
public class ReceiptFin extends javax.swing.JFrame {

    /**
     * Creates new form Receipt
     */
    public ReceiptFin() {
        initComponents();
        float change = 0, paymentamt = 0;
        TableModel tm = POSNEW.jTable1.getModel();
        ArrayList<String> quan = new ArrayList<String>();
        for(int i=0; i < tm.getRowCount(); i++) {
            quan.add(tm.getValueAt(i,1) + "\t" + tm.getValueAt(i,2) + "\tP" + tm.getValueAt(i,3) + ".0");
        }
        
        this.setSize(473, 368);
        this.setLocationRelativeTo(null);
        txtareaReceipt.setEditable(false);
        txtareaReceipt.append("\t      SUNTEA PH"+ 
                "\n       Sta. Mesa, Manila Branch"+
                "\n\n\t       RECEIPT"+
                "\n\n======================================"+
                "\n\nDATE:             "+ POSNEW.lblDate.getText() +
                "\nCASHIER NAME:     "+ Login.txtName.getText() +
                "\nCUSTOMER NAME:    "+ Calcu.customerName.getText() +
                "\n\n======================================"+
                "\n\n           LIST OF ORDERS");
        for(String a: quan){
            txtareaReceipt.append("\n" + a);
        }
        
        float total = Float.parseFloat(POSNEW.lblTotal.getText());
        float discount = Float.parseFloat(POSNEW.lblAppliedDiscount.getText());
        float payment = Float.parseFloat(POSNEW.lblPaymentAmount.getText());
        float cash = Float.parseFloat(Calcu.cashReceived.getText());
        paymentamt = total - discount;
        change = cash - paymentamt;
           
        txtareaReceipt.append("\n\n======================================"+
                "\n\nTOTAL:            P"+ POSNEW.lblTotal.getText() +
                "\nAPPLIED DISCOUNT: P"+ POSNEW.lblAppliedDiscount.getText() +
                "\nPAYMENT AMOUNT:   P"+ paymentamt +
                "\nCASH RECEIVED:    P"+ Calcu.cashReceived.getText() +
                "\nCHANGE:           P"+ change +
                "\n\n\n\n       THANK YOU FOR PURCHASING!");
    }
    Connection con;
    PreparedStatement pst;
    PreparedStatement pst1;
    PreparedStatement pst2;
    PreparedStatement pst3;
    PreparedStatement pst4;
    PreparedStatement pst6;
    PreparedStatement pst7;
    PreparedStatement pst5;
    PreparedStatement pst8;
    PreparedStatement pst9;
    ResultSet rs;
    ResultSet rs1;
    
    public void Connect()
    {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/ordering", "root", "");
        }
        
        catch (ClassNotFoundException ex){
            Logger.getLogger(ReceiptFin.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ReceiptFin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrpaneReceipt = new javax.swing.JScrollPane();
        txtareaReceipt = new javax.swing.JTextArea();
        btnNextOrder = new javax.swing.JButton();
        btnPrintRpt = new javax.swing.JButton();
        lblHeader = new javax.swing.JLabel();
        lblWhiteBG = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(null);

        txtareaReceipt.setColumns(20);
        txtareaReceipt.setFont(new java.awt.Font("Lucida Console", 0, 10)); // NOI18N
        txtareaReceipt.setRows(5);
        scrpaneReceipt.setViewportView(txtareaReceipt);

        getContentPane().add(scrpaneReceipt);
        scrpaneReceipt.setBounds(10, 90, 260, 270);

        btnNextOrder.setBackground(new java.awt.Color(255, 192, 0));
        btnNextOrder.setFont(new java.awt.Font("Bahnschrift", 1, 20)); // NOI18N
        btnNextOrder.setForeground(new java.awt.Color(255, 255, 255));
        btnNextOrder.setText("NEXT ORDER");
        btnNextOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextOrderActionPerformed(evt);
            }
        });
        getContentPane().add(btnNextOrder);
        btnNextOrder.setBounds(290, 170, 170, 40);

        btnPrintRpt.setBackground(new java.awt.Color(255, 192, 0));
        btnPrintRpt.setFont(new java.awt.Font("Bahnschrift", 1, 16)); // NOI18N
        btnPrintRpt.setForeground(new java.awt.Color(255, 255, 255));
        btnPrintRpt.setText("PRINT RECEIPT");
        btnPrintRpt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintRptActionPerformed(evt);
            }
        });
        getContentPane().add(btnPrintRpt);
        btnPrintRpt.setBounds(290, 220, 170, 40);

        lblHeader.setIcon(new javax.swing.ImageIcon(getClass().getResource("/orderingsystem/RESIT.jpg"))); // NOI18N
        lblHeader.setText("jLabel1");
        getContentPane().add(lblHeader);
        lblHeader.setBounds(0, 0, 490, 80);

        lblWhiteBG.setBackground(new java.awt.Color(255, 255, 255));
        lblWhiteBG.setIcon(new javax.swing.ImageIcon(getClass().getResource("/orderingsystem/whitebg.jpg"))); // NOI18N
        lblWhiteBG.setText("jLabel2");
        getContentPane().add(lblWhiteBG);
        lblWhiteBG.setBounds(0, 0, 480, 370);

        pack();
    }// </editor-fold>//GEN-END:initComponents
        public void cups500(){
       
      try {
            
            pst1 = con.prepareStatement("select sum(Qty) from customer where Item_Code = ?");
            pst1.setString(1,"CUPS500");
            rs = pst1.executeQuery();
            
            while(rs.next()){
                   
                 String sum1 = rs.getString("sum(Qty)");

                 if(sum1 != null){
                 
                 pst2 = con.prepareStatement("select ITEM_QTY from supplies where ITEM_CODE = ?");
		 pst2.setString(1,"CUPS500");
		 rs1 = pst2.executeQuery();
                 
                 // ADD QTY to items Table
                 pst7 = con.prepareStatement("update items set Qty = ? where Item_Codes = ?");
                pst7.setString(1, sum1); 
                pst7.setString(2, "CUPS500"); 
                pst7.executeUpdate();

            
            
            	 while(rs1.next())
            	{
                
               		float currentQty = Float.parseFloat(rs1.getString("ITEM_QTY"));
               		float Qty_No = Float.parseFloat(sum1);
         		float final_No = (currentQty - Qty_No);
         		String final_Qty = String.valueOf(final_No);

                
                
         
               		pst3 = con.prepareStatement("update supplies set ITEM_QTY = ? where ITEM_CODE = ?");
              
                	pst3.setString(1, final_Qty); 
                	pst3.setString(2, "CUPS500"); 
                	pst3.executeUpdate();
               }
          }
                else if (sum1 == null){
                pst7 = con.prepareStatement("update items set Qty = ? where Item_Codes = ?");
              
                pst7.setString(1, "0"); 
                pst7.setString(2, "CUPS500"); 
                pst7.executeUpdate();
                }

    }
            
        }catch (SQLException ex) {
            Logger.getLogger(ReceiptFin.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    

    public void cups700(){
       
     
        try {
            
            pst1 = con.prepareStatement("select sum(Qty) from customer where Item_Code = ?");
            pst1.setString(1,"CUPS700");
            rs = pst1.executeQuery();
            
            while(rs.next()){
                   
                 String sum1 = rs.getString("sum(Qty)");

                 if(sum1 != null){
                 
                 pst2 = con.prepareStatement("select ITEM_QTY from supplies where ITEM_CODE = ?");
		 pst2.setString(1,"CUPS700");
		 rs1 = pst2.executeQuery();
                 
                 // ADD QTY to items Table
                pst7 = con.prepareStatement("update items set Qty = ? where Item_Codes = ?");
                pst7.setString(1, sum1); 
                pst7.setString(2, "CUPS700"); 
                pst7.executeUpdate();

            
            
            	 while(rs1.next())
            	{
                
               		float currentQty = Float.parseFloat(rs1.getString("ITEM_QTY"));
               		float Qty_No = Float.parseFloat(sum1);
         		float final_No = (currentQty - Qty_No);
         		String final_Qty = String.valueOf(final_No);

                
                
         
               		pst3 = con.prepareStatement("update supplies set ITEM_QTY = ? where ITEM_CODE = ?");
              
                	pst3.setString(1, final_Qty); 
                	pst3.setString(2, "CUPS700"); 
                	pst3.executeUpdate();
               }
          }
                 else if (sum1 == null){
                pst7 = con.prepareStatement("update items set Qty = ? where Item_Codes = ?");
                pst7.setString(1, "0"); 
                pst7.setString(2, "CUPS700"); 
                pst7.executeUpdate();
                }

    }
        }catch (SQLException ex) {
            Logger.getLogger(ReceiptFin.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
     public void bott350(){
      
        try {
            
            pst1 = con.prepareStatement("select sum(Qty) from customer where Item_Code = ?");
            pst1.setString(1,"BOTT350");
            rs = pst1.executeQuery();
            
            while(rs.next()){
                   
                 String sum1 = rs.getString("sum(Qty)");

                 if(sum1 != null){
                 
                 pst2 = con.prepareStatement("select ITEM_QTY from supplies where ITEM_CODE = ?");
		 pst2.setString(1,"BOTT350");
		 rs1 = pst2.executeQuery();
                 
                 // ADD QTY to items Table
                pst7 = con.prepareStatement("update items set Qty = ? where Item_Codes = ?");
                pst7.setString(1, sum1); 
                pst7.setString(2, "BOTT350"); 
                pst7.executeUpdate();

            
            
            	 while(rs1.next())
            	{
                
               		float currentQty = Float.parseFloat(rs1.getString("ITEM_QTY"));
               		float Qty_No = Float.parseFloat(sum1);
         		float final_No = (currentQty - Qty_No);
         		String final_Qty = String.valueOf(final_No);

                
                
         
               		pst3 = con.prepareStatement("update supplies set ITEM_QTY = ? where ITEM_CODE = ?");
              
                	pst3.setString(1, final_Qty); 
                	pst3.setString(2, "BOTT350"); 
                	pst3.executeUpdate();
               }
          }
                else if (sum1==null){
                pst7 = con.prepareStatement("update items set Qty = ? where Item_Codes = ?");
              
                pst7.setString(1, "0"); 
                pst7.setString(2, "BOTT350"); 
                pst7.executeUpdate();
                }

    }
        }catch (SQLException ex) {
            Logger.getLogger(ReceiptFin.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
public void cups350(){
       
     
     
        try {
            
            pst1 = con.prepareStatement("select sum(Qty) from customer where Item_Code = ?");
            pst1.setString(1,"CUPS350");
            rs = pst1.executeQuery();
            
            while(rs.next()){
                   
                 String sum1 = rs.getString("sum(Qty)");

                 if(sum1 != null){
                 
                 pst2 = con.prepareStatement("select ITEM_QTY from supplies where ITEM_CODE = ?");
		 pst2.setString(1,"CUPS350");
		 rs1 = pst2.executeQuery();
                 
                 // ADD QTY to items Table
                pst7 = con.prepareStatement("update items set Qty = ? where Item_Codes = ?");
                pst7.setString(1, sum1); 
                pst7.setString(2, "CUPS350"); 
                pst7.executeUpdate();

            
            
            	 while(rs1.next())
            	{
                
               		float currentQty = Float.parseFloat(rs1.getString("ITEM_QTY"));
               		float Qty_No = Float.parseFloat(sum1);
         		float final_No = (currentQty - Qty_No);
         		String final_Qty = String.valueOf(final_No);

                
                
         
               		pst3 = con.prepareStatement("update supplies set ITEM_QTY = ? where ITEM_CODE = ?");
              
                	pst3.setString(1, final_Qty); 
                	pst3.setString(2, "CUPS350"); 
                	pst3.executeUpdate();
               }
          }
                 else if (sum1==null){
                pst7 = con.prepareStatement("update items set Qty = ? where Item_Codes = ?");
                pst7.setString(1, "0"); 
                pst7.setString(2, "CUPS350"); 
                pst7.executeUpdate();
                }

    }
        }catch (SQLException ex) {
            Logger.getLogger(ReceiptFin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

public void wocsol(){
       
     
     
        try {
            
            pst1 = con.prepareStatement("select sum(Qty) from customer where Item_Code = ?");
            pst1.setString(1,"WOCSOL");
            rs = pst1.executeQuery();
            
            while(rs.next()){
                   
                 String sum1 = rs.getString("sum(Qty)");

                 if(sum1 != null){
                 
                 pst2 = con.prepareStatement("select ITEM_QTY from supplies where ITEM_CODE = ?");
		 pst2.setString(1,"WOCSOL");
		 rs1 = pst2.executeQuery();

                 // ADD QTY to items Table
                pst7 = con.prepareStatement("update items set Qty = ? where Item_Codes = ?");
                pst7.setString(1, sum1); 
                pst7.setString(2, "WOCSOL"); 
                pst7.executeUpdate();
            
            	 while(rs1.next())
            	{
                
               		float currentQty = Float.parseFloat(rs1.getString("ITEM_QTY"));
               		float Qty_No = Float.parseFloat(sum1);
         		float final_No = (currentQty - Qty_No);
         		String final_Qty = String.valueOf(final_No);

                
                
         
               		pst3 = con.prepareStatement("update supplies set ITEM_QTY = ? where ITEM_CODE = ?");
              
                	pst3.setString(1, final_Qty); 
                	pst3.setString(2, "WOCSOL"); 
                	pst3.executeUpdate();
               }
          }
                else if (sum1==null){
                pst7 = con.prepareStatement("update items set Qty = ? where Item_Codes = ?");
                pst7.setString(1, "0"); 
                pst7.setString(2, "WOCSOL"); 
                pst7.executeUpdate();
                }

    }
        }catch (SQLException ex) {
            Logger.getLogger(ReceiptFin.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

public void wocsqd(){
       
     
        try {
            
            pst1 = con.prepareStatement("select sum(Qty) from customer where Item_Code = ?");
            pst1.setString(1,"WOCSQD");
            rs = pst1.executeQuery();
            
            while(rs.next()){
                   
                 String sum1 = rs.getString("sum(Qty)");

                 if(sum1 != null){
                 
                 pst2 = con.prepareStatement("select ITEM_QTY from supplies where ITEM_CODE = ?");
		 pst2.setString(1,"WOCSQD");
		 rs1 = pst2.executeQuery();
                 
                 // ADD QTY to items Table
                pst7 = con.prepareStatement("update items set Qty = ? where Item_Codes = ?");
                pst7.setString(1, sum1); 
                pst7.setString(2, "WOCSQD"); 
                pst7.executeUpdate();

            
            
            	 while(rs1.next())
            	{
                
               		float currentQty = Float.parseFloat(rs1.getString("ITEM_QTY"));
               		float Qty_No = Float.parseFloat(sum1);
         		float final_No = (currentQty - Qty_No);
         		String final_Qty = String.valueOf(final_No);

                
                
         
               		pst3 = con.prepareStatement("update supplies set ITEM_QTY = ? where ITEM_CODE = ?");
              
                	pst3.setString(1, final_Qty); 
                	pst3.setString(2, "WOCSQD"); 
                	pst3.executeUpdate();
               }
          }
                else if (sum1==null){
                pst7 = con.prepareStatement("update items set Qty = ? where Item_Codes = ?");
                pst7.setString(1, "0"); 
                pst7.setString(2, "WOCSQD"); 
                pst7.executeUpdate();
                }

    }
        }catch (SQLException ex) {
            Logger.getLogger(ReceiptFin.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

public void cnd(){
        
     
        try {
            
            pst1 = con.prepareStatement("select sum(Qty) from customer where Item_Code = ?");
            pst1.setString(1,"CND");
            rs = pst1.executeQuery();
            
            while(rs.next()){
                   
                 String sum1 = rs.getString("sum(Qty)");

                 if(sum1 != null){
                 
                 pst2 = con.prepareStatement("select ITEM_QTY from supplies where ITEM_CODE = ?");
		 pst2.setString(1,"CND");
		 rs1 = pst2.executeQuery();
                 
                 // ADD QTY to items Table
                pst7 = con.prepareStatement("update items set Qty = ? where Item_Codes = ?");              
                pst7.setString(1, sum1); 
                pst7.setString(2, "CND"); 
                pst7.executeUpdate();

            
            
            	 while(rs1.next())
            	{
                
               		float currentQty = Float.parseFloat(rs1.getString("ITEM_QTY"));
               		float Qty_No = Float.parseFloat(sum1);
         		float final_No = (currentQty - Qty_No);
         		String final_Qty = String.valueOf(final_No);

                
                
         
               		pst3 = con.prepareStatement("update supplies set ITEM_QTY = ? where ITEM_CODE = ?");
              
                	pst3.setString(1, final_Qty); 
                	pst3.setString(2, "CND"); 
                	pst3.executeUpdate();
               }
          }
                else if (sum1==null){
                pst7 = con.prepareStatement("update items set Qty = ? where Item_Codes = ?");              
                pst7.setString(1, "0"); 
                pst7.setString(2, "CND"); 
                pst7.executeUpdate();
                }
    }
        }catch (SQLException ex) {
            Logger.getLogger(ReceiptFin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
   
public void frsol(){
       
     
        try {
            
            pst1 = con.prepareStatement("select sum(Qty) from customer where Item_Code = ?");
            pst1.setString(1,"FRSOL");
            rs = pst1.executeQuery();
            
            while(rs.next()){
                   
                 String sum1 = rs.getString("sum(Qty)");

                 if(sum1 != null){
                 
                 pst2 = con.prepareStatement("select ITEM_QTY from supplies where ITEM_CODE = ?");
		 pst2.setString(1,"FRSOL");
		 rs1 = pst2.executeQuery();
                 
                 // ADD QTY to items Table
                pst7 = con.prepareStatement("update items set Qty = ? where Item_Codes = ?");              
                pst7.setString(1, sum1); 
                pst7.setString(2, "FRSOL"); 
                pst7.executeUpdate();

            	 while(rs1.next())
            	{
                
               		float currentQty = Float.parseFloat(rs1.getString("ITEM_QTY"));
               		float Qty_No = Float.parseFloat(sum1);
         		float final_No = (currentQty - Qty_No);
         		String final_Qty = String.valueOf(final_No);

                
                
         
               		pst3 = con.prepareStatement("update supplies set ITEM_QTY = ? where ITEM_CODE = ?");
              
                	pst3.setString(1, final_Qty); 
                	pst3.setString(2, "FRSOL"); 
                	pst3.executeUpdate();
               }
          }
                else if (sum1==null){
                pst7 = con.prepareStatement("update items set Qty = ? where Item_Codes = ?");              
                pst7.setString(1, "0"); 
                pst7.setString(2, "FRSOL"); 
                pst7.executeUpdate();
                }

    }
        }catch (SQLException ex) {
            Logger.getLogger(ReceiptFin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

public void frfriend(){
        
     
        try {
            
            pst1 = con.prepareStatement("select sum(Qty) from customer where Item_Code = ?");
            pst1.setString(1,"FRFRIEND");
            rs = pst1.executeQuery();
            
            while(rs.next()){
                   
                 String sum1 = rs.getString("sum(Qty)");

                 if(sum1 != null){
                 
                 pst2 = con.prepareStatement("select ITEM_QTY from supplies where ITEM_CODE = ?");
		 pst2.setString(1,"FRFRIEND");
		 rs1 = pst2.executeQuery();
                 
                 // ADD QTY to items Table
                pst7 = con.prepareStatement("update items set Qty = ? where Item_Codes = ?");              
                pst7.setString(1, sum1); 
                pst7.setString(2, "FRFRIEND"); 
                pst7.executeUpdate();

            	 while(rs1.next())
            	{
                
               		float currentQty = Float.parseFloat(rs1.getString("ITEM_QTY"));
               		float Qty_No = Float.parseFloat(sum1);
         		float final_No = (currentQty - Qty_No);
         		String final_Qty = String.valueOf(final_No);

                
                
         
               		pst3 = con.prepareStatement("update supplies set ITEM_QTY = ? where ITEM_CODE = ?");
              
                	pst3.setString(1, final_Qty); 
                	pst3.setString(2, "FRFRIEND"); 
                	pst3.executeUpdate();
               }
          }
                else if (sum1==null){
                pst7 = con.prepareStatement("update items set Qty = ? where Item_Codes = ?");              
                pst7.setString(1, "0"); 
                pst7.setString(2, "FRFRIEND"); 
                pst7.executeUpdate();
                }

    }
        }catch (SQLException ex) {
            Logger.getLogger(ReceiptFin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void btnNextOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextOrderActionPerformed
            
         Connect();
         POSNEW.refresh_ctr = 0;
         POSNEW.btnRefresh.setEnabled(false);
         POSNEW.btnConfirm.setEnabled(false);
         
         cups500();
         cups700();
         cups350();
         bott350();
         wocsol();
         wocsqd();
         cnd();
         frsol();
         frfriend();
      
        try { 
            pst = con.prepareStatement("Select * from customer");

            rs = pst.executeQuery();
            ResultSetMetaData Rsm1 = rs.getMetaData();
            int c;
            c = Rsm1.getColumnCount();
  
            
            while(rs.next())
            {
                
                pst1 = con.prepareStatement("insert into orders(Customer_Name,Quantity,Product_code, Item_CodeNo, Product_Name,Date_of_Order,Amount,Applied_Discount,Special_Instructions)values(?,?,?,?,?,?,?,?,?)");
                
      
                String name = rs.getString("Customer");
                String qn = rs.getString("Qty");
                String pcode = rs.getString("Prod_Code");
                String icode = rs.getString("Item_Code");
                String pname = rs.getString("Prod_Name");
                String date1 = rs.getString("Date");
                String amount = rs.getString("Amt");
                String ds = rs.getString("Discount");
                String special = rs.getString("Instructions");


                
                pst1.setString(1, name); 
                pst1.setString(2, qn);  
                pst1.setString(3, pcode); 
                pst1.setString(4, icode); 
                pst1.setString(5, pname);  
                pst1.setString(6, date1);  
                pst1.setString(7, amount);    
                pst1.setString(8, ds);
                pst1.setString(9, special);
                pst1.executeUpdate();
                
                pst2= con.prepareStatement("delete from customer");
                pst2.executeUpdate();
               
               
            }
            
        }catch (SQLException ex) {
            Logger.getLogger(ReceiptFin.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        POSNEW.lblTotal.setText("0.0");
        POSNEW.lblAppliedDiscount.setText("0.0");
        POSNEW.lblPaymentAmount.setText("0.0");
        
        POSNEW.rdbtnPWD.setSelected(false);
        POSNEW.rdbtnSenior.setSelected(false);
        
        POSNEW.qty_cups500 = 0;
        POSNEW.ctr_cups500 = 0;
        POSNEW.qty_cups700 = 0;
        POSNEW.ctr_cups700 = 0;
        POSNEW.qty_bott350 = 0;
        POSNEW.ctr_bott350 = 0;
        POSNEW.qty_cups350 = 0;
        POSNEW.ctr_cups350 = 0;
        POSNEW.qty_CND = 0;
        POSNEW.ctr_CND = 0;
        POSNEW.qty_FRSOL = 0;
        POSNEW.ctr_FRSOL= 0;
        POSNEW.qty_FRFRIEND = 0;
        POSNEW.ctr_FRFRIEND = 0;
        POSNEW.qty_WOCSOL = 0;
        POSNEW.ctr_WOCSOL = 0;
        POSNEW.qty_WOCSQD = 0;
        POSNEW.ctr_WOCSQD = 0;
        
        int ctr = 1;
        String reset = String.valueOf(ctr);
        POSNEW.lblRecNo.setText(reset);
        
        Connect();
         try {
            
            pst3 = con.prepareStatement("select * from customer");
            rs = pst3.executeQuery();
            ResultSetMetaData Rsm = rs.getMetaData();
            int c;
            c = Rsm.getColumnCount();
            
            DefaultTableModel df = (DefaultTableModel)POSNEW.jTable1.getModel();
            df.setRowCount(0);
            
            
            while(rs.next())
            {
                Vector v2 = new Vector();
                
                for(int i = 1; i <= c; i++)
                {
                v2.add(rs.getString("Qty"));
                v2.add(rs.getString("Prod_Code"));
                v2.add(rs.getString("Amt")); 
                }
                
                df.addRow(v2);
            }
            
        }catch (SQLException ex) {
            Logger.getLogger(ReceiptFin.class.getName()).log(Level.SEVERE, null, ex);
        }
         
         dispose();         
    }//GEN-LAST:event_btnNextOrderActionPerformed

    private void btnPrintRptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintRptActionPerformed
        try {
            txtareaReceipt.print();
        } catch (PrinterException ex) {
            Logger.getLogger(PrinterSys.class.getName()).log(Level.SEVERE, null, ex);
        }// TODO add your handling code here:
    }//GEN-LAST:event_btnPrintRptActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReceiptFin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReceiptFin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReceiptFin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReceiptFin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ReceiptFin().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNextOrder;
    private javax.swing.JButton btnPrintRpt;
    private javax.swing.JLabel lblHeader;
    private javax.swing.JLabel lblWhiteBG;
    private javax.swing.JScrollPane scrpaneReceipt;
    private javax.swing.JTextArea txtareaReceipt;
    // End of variables declaration//GEN-END:variables

    private static class PrinterSys {

        public PrinterSys() {
        }
    }
}
